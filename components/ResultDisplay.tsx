
import React from 'react';
import { Spinner } from './Spinner';

interface ResultDisplayProps {
  isLoading: boolean;
  generatedImage: string | null;
  error: string | null;
  ratings?: { likes: number; dislikes: number };
  userVote?: 'good' | 'bad';
  isVoting: boolean;
  onDownload: () => void;
  onRetry: () => void;
  onFeedback: (rating: 'good' | 'bad') => void;
  t: {
    result: string;
    generating: string;
    download: string;
    tryAgain: string;
    errorTitle: string;
    errorSafety: string;
    errorApi: string;
    errorNoImage: string;
    errorUnknown: string;
    feedbackQuestion: string;
    feedbackThanks: string;
    feedbackCommunity: string;
    feedbackCommunityDisliked: string;
  };
}

const ErrorMessage: React.FC<{ error: string, t: ResultDisplayProps['t'] }> = ({ error, t }) => {
  let message = t.errorUnknown;
  if (error === 'SAFETY_BLOCK') message = t.errorSafety;
  if (error === 'API_ERROR') message = t.errorApi;
  if (error === 'NO_IMAGE_GENERATED') message = t.errorNoImage;

  return (
    <div className="text-center p-6 bg-red-900/50 border border-red-500 rounded-lg">
      <h3 className="text-xl font-bold text-red-300">{t.errorTitle}</h3>
      <p className="mt-2 text-red-200">{message}</p>
    </div>
  );
};

const FeedbackDisplay: React.FC<{
  onFeedback: (rating: 'good' | 'bad') => void;
  ratings?: { likes: number; dislikes: number };
  userVote?: 'good' | 'bad';
  isVoting: boolean;
  t: ResultDisplayProps['t'];
}> = ({ onFeedback, ratings, userVote, isVoting, t }) => {
  
  if (userVote) {
    const likeCount = ratings?.likes ?? 0;
    const dislikeCount = ratings?.dislikes ?? 0;

    return (
        <div className="text-center bg-gray-800/50 p-3 rounded-lg">
            <p className="font-semibold text-cyan-300">{t.feedbackThanks}</p>
            {userVote === 'good' && likeCount > 0 && (
                <p className="text-sm text-gray-400 mt-1">
                    {t.feedbackCommunity.replace('{count}', likeCount.toLocaleString())}
                </p>
            )}
             {userVote === 'bad' && dislikeCount > 0 && (
                <p className="text-sm text-gray-400 mt-1">
                    {t.feedbackCommunityDisliked.replace('{count}', dislikeCount.toLocaleString())}
                </p>
            )}
        </div>
    );
  }

  return (
    <div className="flex items-center justify-center gap-3 text-gray-300">
        <span className={isVoting ? 'opacity-50' : ''}>{t.feedbackQuestion}</span>
        <button onClick={() => onFeedback('good')} disabled={isVoting} className="p-2 rounded-full transition-colors text-2xl hover:bg-gray-700 disabled:opacity-50 disabled:cursor-wait">üëç</button>
        <button onClick={() => onFeedback('bad')} disabled={isVoting} className="p-2 rounded-full transition-colors text-2xl hover:bg-gray-700 disabled:opacity-50 disabled:cursor-wait">üëé</button>
    </div>
  );
};


export const ResultDisplay: React.FC<ResultDisplayProps> = ({
  isLoading,
  generatedImage,
  error,
  ratings,
  userVote,
  isVoting,
  onDownload,
  onRetry,
  onFeedback,
  t
}) => {
  const showInitialState = !isLoading && !generatedImage && !error;

  return (
    <div className="space-y-6">
      <h2 className="text-xl md:text-2xl font-semibold text-gray-200 border-b-2 border-gray-700 pb-2">
        {t.result}
      </h2>

      <div className="w-full aspect-square bg-gray-900/50 rounded-lg flex items-center justify-center border-2 border-gray-700 relative overflow-hidden">
        {isLoading && <Spinner />}

        {error && !isLoading && <ErrorMessage error={error} t={t} />}
        
        {generatedImage && !isLoading && (
          <img
            src={`data:image/jpeg;base64,${generatedImage}`}
            alt="Generated by AI"
            className="object-contain w-full h-full rounded-lg animate-fade-in"
          />
        )}
        
        {showInitialState && (
          <div className="text-center text-gray-500">
             <svg xmlns="http://www.w3.org/2000/svg" className="mx-auto h-16 w-16" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <p className="mt-4">Your generated image will appear here</p>
          </div>
        )}
      </div>

      {generatedImage && !isLoading && (
        <div className="flex flex-col sm:flex-row items-center justify-center gap-4 animate-fade-in">
          <button onClick={onDownload} className="w-full sm:w-auto flex-1 bg-cyan-600 hover:bg-cyan-500 text-white font-bold py-3 px-6 rounded-lg transition-colors">
            {t.download}
          </button>
           <FeedbackDisplay onFeedback={onFeedback} ratings={ratings} userVote={userVote} isVoting={isVoting} t={t} />
        </div>
      )}

      {error && !isLoading && (
         <button onClick={onRetry} className="w-full bg-cyan-600 hover:bg-cyan-500 text-white font-bold py-3 px-6 rounded-lg transition-colors animate-fade-in">
            {t.tryAgain}
         </button>
      )}
    </div>
  );
};
